import TelegramBot from 'node-telegram-bot-api';
import cron from 'node-cron';


// Este es el token del bot. NO LO TOQUES O NO FUNCIONAR√Å. POR FAVOR. ¬°¬°¬°QUE NO LO TOQUES!!!
const token = '6021834143:AAGemZdEuSEr4JcTWhn6B51XYK37cf4onW0';

// Crea una nueva instancia del bot
const bot = new TelegramBot(token, { polling: true });

// Estructura de los usuarios
interface myUser {
    user: TelegramBot.User;
    dias: myDay[];
    preferredName?: string;
};

// Datos de los d√≠as, sirven para establecer si un usuario lleva setup un d√≠a concreto
interface myDay {
    dia: string;
    setup: boolean;
}

var quedadaExists = false; // Variable para mandar mensajes concretos tanto a los usuarios como con cron
var listaQuedada: myUser[] = []; // Array para almacenar los nombres de los asistentes
//const listaConsolas: string[] = []; // Array para almacenar la pe√±a que trae Switch con juego

const diaSemana = ["Lunes", "Martes", "Mi√©rcoles", "Jueves", "Viernes", "S√°bado", "Domingo"]; // Array con d√≠as de la semana
const mes = ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"]; // Array con los meses

// Escucha el comando /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;

    // Mensaje de respuesta al comando /start
    const responseOne = '¬°Hola! Espero que no os pille desprevenidos. ¬°Soy SmashMalagaBot! El nombre es horrible, lo s√©, pero mi creador, Asancu., est√° falto de ideas y no se le ocurri√≥ otro, el muy bobo.';
    const responseTwo = '¬°Os ayudar√© con las quedadas y m√°s! Escribid /aiuda para m√°s informaci√≥n.';
    const responseThree = 'Gente, estoy en una fase muy temprana de desarrollo y puede que haya errores. Estoy bastante nervioso y no s√© c√≥mo saldr√° esto, pero cualquier sugerencia pod√©is escribir a Asancu. o manifestarla por aqu√≠. \n **Desarrolladores**, si est√°is interesados, ¬°buscadme en GitHub! \n\n ¬°Sed buenos!'

    // Enviar la respuesta al comando /start
    async function enviarMensajesApuntado(chatId: number) {
        try {
            await bot.sendMessage(chatId, responseOne);
            await bot.sendMessage(chatId, responseTwo);
            await bot.sendMessage(chatId, responseThree);
        } catch (error) {
            console.error('Creo que he petado... A ver si entiendes esto: ' + error) // Esperemos que esta l√≠nea nunca triggeree. No deber√≠a. No DEBE.
        }
    }
    enviarMensajesApuntado(chatId);
});

let fechasQuedada = ''; // Aqu√≠ van todos los d√≠as que pueda haber quedada seg√∫n los admins

// Funci√≥n para generar la lista para la pr√≥xima quedada
function generarListaQuedada() {
    let textoQuedada =
        `Quedada(s) de esta semana:

${fechasQuedada}
Pod√©is apuntaros a cualquier d√≠a
Recordad que el d√≠a con m√°s asistentes ser√° el elegido para quedar

üïî 16:30 - 20:30
üèõ La Ci√©naga Hobby Shop (C. Leopoldo Alas "Clar√≠n", 3, 29002 M√°laga) - https://goo.gl/maps/9VE1Wp85apkyCpjW6
üíµ 4‚Ç¨ por persona\n`;

    for (let f of fechas) {  //Por cada fecha que pueda haber quedada se genera una lista de usuarios y setups
        textoQuedada +=
            `\nüë• Asistentes ${f.diaSemana} ${f.numeroDia}:\n`;

        for (const u of listaQuedada) {
            for (const d of u.dias) {
                if (d.dia === f.diaSemana) {
                    textoQuedada += '          - ' + (u.preferredName ? u.preferredName : u.user.username || u.user.first_name) + (d.setup ? ' üçÑ' : '') + '\n';
                }
            }
        }
    }

    return textoQuedada; // Devuelve la lista enterita
};

// Comando para apuntarse a la quedada
bot.onText(/\/apuntame( +.*)*$/, (msg) => {
    const chatId = msg.chat.id;

    if (quedadaExists) {
        const user = msg.from;

        /*
        * IMPORTANTE
        *
        * El siguiente bloque de c√≥digo se repite con peque√±as modificaciones en los m√©todos /quitame, /apuntarSeta y /quitarSeta.
        * 
        * La funcionalidad de todos esos comandos es pr√°cticamente igual a excepci√≥n de las condiciones para agregar, quitar o modificar informaci√≥n
        * de los usuarios de la quedada. No se comentar√° lo que funcione de forma hom√≥loga, s√≥lo aquello que sea m√°s espec√≠fico de cada m√©todo
        */

        // Verificar si el usuario existe
        if (user) {
            let dias = msg.text?.replace('/apuntame', '');  // De aqu√≠ sacamos los d√≠as que se apunte el usuario, ej:   /apuntame viernes sabado

            if (dias && dias.length > 0) {   // Si el usuario ha puesto algo despu√©s del /apuntame, entra
                let apuntadoChanged = false;  // Variable para editar o no el mensaje fijado
                const arrayDias = dias.trim().split(' ')  // Sacamos los dias que haya puesto el usuario
                const actualDias = procesarDias(arrayDias, true)  // Comprobamos que sean d√≠as v√°lidos, no sea que el usuario haya puesto /apuntame yogurt chorizo
                const userData = userApuntado(user);  // Comprobamos si el usuario ya estaba apuntado a algo
                if (actualDias.length > 0) {   // Si hay al menos un d√≠a v√°lido, seguimos
                    if (userData.exists) {       // Si el usuario ya estaba apuntado, hay que hacer unas comprobaciones
                        for (const d of actualDias) {
                            let found = false;

                            for (const e of userData.dias) {            // En este bloque se comprueba si en los d√≠as que el usuario se ha apuntado a cosas
                                if (!found) {                           // est√°n incluidos d√≠as que ha introducido con /apuntame
                                    found = d === e.dia;
                                }
                            }

                            if (found) {         // Si el d√≠a ya est√° incluido en sus d√≠as, se le avisa de que ya estaba apuntado
                                bot.sendMessage(chatId, `Ya estabas apuntad@ el ${d.toLowerCase()}, @${user.username || user.first_name}...`);
                            } else {            // Si no, se incluye en sus d√≠as y cambiamos la variable para editar el fijado
                                listaQuedada[userData.index].dias.push({ dia: d, setup: false });
                                apuntadoChanged = true;
                            }
                        }
                        if (apuntadoChanged) {    // Si ha habido cambios en el usuario, se edita el mensaje
                            bot.editMessageText(generarListaQuedada(), { chat_id: chatId, message_id: idQuedada }).then(res => {
                                bot.sendMessage(chatId, `¬°Est√°s dentro, @${user.username || user.first_name}!`);
                            });
                        }
                    } else {  // Si el usuario no estaba apuntado a nada, se le apunta a los d√≠as directamente
                        let diasData: myDay[] = [];
                        for (const d of actualDias) {
                            diasData.push({ dia: d, setup: false });
                        }
                        listaQuedada.push({ user: user, dias: diasData });  // Se introduce el nuevo usuario
                        bot.editMessageText(generarListaQuedada(), { chat_id: chatId, message_id: idQuedada });  // Se edita el mensaje fijado
                        bot.sendMessage(chatId, `¬°Vale, ya est√°s en la lista, @${user.username}!`)
                    }
                }
            } else {     // Si el usuario no incluye d√≠as, se le avisa
                bot.sendMessage(chatId, `¬øPero qu√© d√≠as quieres ir, @${user.username || user.first_name}? \n Recuerda: "/apuntame [d√≠a/s]".`);
            }
        }
    } else {      // Si no hay quedada creada, se le avisa
        bot.sendMessage(chatId, '¬°Qu√© impaciente! ¬°A√∫n no hay quedada creada! Espera a que el Staff crea una.');
    }
})

function procesarDias(dias: string[], byUsuario: boolean) {   // Funci√≥n simple para comprobar si un d√≠a es v√°lido, hay que ser muy terrorista para escribir mal los d√≠as de la semana
    const result: string[] = [];

    for (let d of dias) {
        for (let k of diaSemana) {
            const dNormalized = d.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();
            const kNormalized = k.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();
            if (dNormalized === kNormalized) {
                if (byUsuario && diaDisponible(k))
                    result.push(k);
                else if (!byUsuario)
                    result.push(k);
            }
        }
    }
    return result;
}

function diaDisponible(dia: string) {   // Funci√≥n para ver si un d√≠a corresponde los establecidos por la quedada
    for (let f of fechas) {
        if (dia === f.diaSemana) {
            return true;
        }
    }
    return false;
}

function userApuntado(user: TelegramBot.User) {   // Funci√≥n para saber si un usuario est√° apuntado a alg√∫n d√≠a
    for (let [index, u] of listaQuedada.entries()) {
        if (u.user.id === user.id) {
            return { exists: true, dias: u.dias, index: index };
        }
    }
    return { exists: false, dias: [], index: -1 };
}

bot.onText(/\/cambiarNick( +.*)*$/, (msg) => {  // Funci√≥n para cambiarte el nick de TODAS las listas en las que est√©s, se puede cambiar m√∫ltiples veces (fiesta)
    const chatId = msg.chat.id;

    if (quedadaExists) {
        const user = msg.from;

        if (user) {
            let preferredName = msg.text?.replace('/cambiarNick', '').trim();

            const apuntado = userApuntado(user);
            if (apuntado.exists) {
                listaQuedada[apuntado.index].preferredName = preferredName;
                bot.editMessageText(generarListaQuedada(), { chat_id: chatId, message_id: idQuedada });
                bot.sendMessage(chatId, `¬°Nick cambiado @${user.username || user.first_name}!`);
                return;
            }
        }
    } else {
        bot.sendMessage(chatId, 'Vamos a ver, para cambiarte el nick, primero tiene que haber quedada...');
    }
})

bot.onText(/\/apuntarSeta( +.*)*$/, (msg) => {    // Funci√≥n hom√≥loga a /apuntame, cambiando las condiciones
    const chatId = msg.chat.id;

    if (quedadaExists) {
        const user = msg.from;

        if (user) {
            let dias = msg.text?.replace('/apuntarSeta', '');

            if (dias && dias.length > 0) {
                const arrayDias = dias.trim().split(' ')
                const actualDias = procesarDias(arrayDias, true)

                let diasData: myDay[] = [];
                const userData = userApuntado(user);


                if (actualDias.length > 0) {
                    if (userData.exists) {
                        diasData = userData.dias;
                        for (const d of actualDias) {
                            let found = false;
                            let dayIndex = -1;

                            for (const [index, e] of userData.dias.entries()) {
                                found = d === e.dia;
                                if (found) {
                                    dayIndex = index;
                                }
                            }

                            if (dayIndex >= 0) {
                                if (listaQuedada[userData.index].dias[dayIndex].setup) {
                                    bot.sendMessage(chatId, `Ya llevas setup el ${d.toLowerCase()}, @${user.username || user.first_name}...`);
                                    return;
                                } else {
                                    modificarSetup(userData.index, dayIndex, true);
                                }
                            } else {
                                diasData.push({ dia: d, setup: true });
                            }
                        }
                        bot.editMessageText(generarListaQuedada(), { chat_id: chatId, message_id: idQuedada });
                        bot.sendMessage(chatId, `¬°Setup apuntada, @${user.username || user.first_name}! Gracias por aportar material. üòä`);
                    } else {
                        for (const d of actualDias) {
                            diasData.push({ dia: d, setup: true });
                        }
                        listaQuedada.push({ user: user, dias: diasData });
                        bot.editMessageText(generarListaQuedada(), { chat_id: chatId, message_id: idQuedada });
                    }
                }
            } else {
                bot.sendMessage(chatId, `¬øY qu√© d√≠as quieres llevar setup, @${user.username || user.first_name}? \n Recuerda: /apuntarSeta [d√≠a/s].`);
            }
        }
    } else {
        bot.sendMessage(chatId, '¬°No hay quedada a√∫n! De momento, juega con tu setup en casa, ¬øvale?');
    }
})

function modificarSetup(index: number, dayIndex: number, setup: boolean) {  // Peque√±a funci√≥n para establecer si un usuario concreto lleva setup o no en un d√≠a concreto
    let user = listaQuedada[index];
    user.dias[dayIndex].setup = setup;
    listaQuedada[index] = user;
}

bot.onText(/\/quitarSeta( +.*)*$/, (msg) => {  // Funci√≥n hom√≥loga a /apuntarSeta. En este caso se puede asumir que es la funci√≥n contraria y, en general, las condiciones estar√°n invertidas
    const chatId = msg.chat.id;

    if (quedadaExists) {
        const user = msg.from;

        if (user) {
            let dias = msg.text?.replace('/quitarSeta', '');

            if (dias && dias.length > 0) {
                let quitadoChanged = false;
                const arrayDias = dias.trim().split(' ')
                const actualDias = procesarDias(arrayDias, true)

                const userData = userApuntado(user);

                if (actualDias.length > 0) {
                    if (userData.exists) {
                        for (const d of actualDias) {
                            let found = false;
                            let dayIndex = -1;

                            for (const [index, e] of userData.dias.entries()) {
                                found = d === e.dia;
                                if (found) {
                                    dayIndex = index;
                                }
                            }

                            if (dayIndex >= 0) {
                                if (listaQuedada[userData.index].dias[dayIndex].setup) {
                                    modificarSetup(userData.index, dayIndex, false);
                                    quitadoChanged = true;
                                } else {
                                    bot.sendMessage(chatId, `No tra√≠as setup el ${d.toLowerCase()} de todos modos, @${user.username || user.first_name}...`);
                                }
                            } else {
                                bot.sendMessage(chatId, `No te apuntaste el ${d.toLowerCase()}, @${user.username || user.first_name}...`);
                            }
                        }
                        if (quitadoChanged) {
                            bot.editMessageText(generarListaQuedada(), { chat_id: chatId, message_id: idQuedada }).then(res => {
                                bot.sendMessage(chatId, `¬°Setup quitada, @${user.username || user.first_name}!`);
                            });
                        }
                    }
                    else {
                        bot.sendMessage(chatId, `No est√°s apuntado a ning√∫n d√≠a, @${user.username || user.first_name}...`);
                    }
                }
            } else {
                bot.sendMessage(chatId, `¬øPodr√≠as especificar qu√© d√≠as no vas a llevar setup, @${user.username || user.first_name}? \n Recuerda: "/quitarSeta [d√≠a/s]".`);
            }
        }
    } else {
        bot.sendMessage(chatId, 'No necesitamos setup porque... ¬°no hay ninguna quedada, ill@!');
    }
});

var idQuedada: number;

bot.onText(/\/proximaQuedada( +.*)*$/, (msg) => {
    const user = msg.from;
    const chatId = msg.chat.id;

    if (user) {
        bot.getChatMember(chatId, user.id).then((chatMember) => {
            if (chatId !== 1204113061)
                if (chatMember.status === "administrator" || chatMember.status === "creator") {
                    const dias = msg.text?.replace('/proximaQuedada ', '');

                    if (dias && dias.length > 0) {
                        const arrayDias = dias.trim().split(' ')
                        const actualDias = procesarDias(arrayDias, false)

                        if (actualDias.length > 0) {
                            fechas = [];
                            fechasQuedada = fechaProximaQuedada(actualDias);
                            listaQuedada = [];
                            quedadaExists = true;

                            if (fechas.length > 0) {
                                bot.sendMessage(chatId, generarListaQuedada()).then((message) => {
                                    idQuedada = message.message_id;
                                    bot.pinChatMessage(chatId, idQuedada, { disable_notification: true });
                                });
                            } else {
                                bot.sendMessage(chatId, 'No hay d√≠as v√°lidos. Recuerda que solo valen los identificadores de los d√≠as de la semana (L M X J V S D) que a√∫n no hayan pasado.')
                            }
                        }
                    } else {
                        bot.sendMessage(chatId, "Por favor, dime un d√≠a v√°lido si no te importa... \n '/proximaQuedada sabado', por ejemplo.");
                    }
                }
                else {
                    bot.sendMessage(chatId, `Buen intento, @${user.username || user.first_name}, pero no eres admin ni mucho menos creador...`);
            } else {
                bot.sendMessage(chatId, `Lo siento, ¬°esta funci√≥n es exclusiva del grupo Smash M√°laga, y solo pueden usarlo Admins!`);
            }
        });
    }
});

interface fecha {  // Estructura de las fechas
    diaSemana: string;
    numeroDia: number;
    mes: string;
}

let fechas: fecha[] = [];

function fechaProximaQuedada(dias: string[]) {  // Funci√≥n que genera las fechas para cada indicador de /proximaQuedada
    for (let d of dias) {
        console.log(d);
        let q = diaSemana.indexOf(d);
        const nextFecha = calcularNumeroDia(q);   // Funci√≥n que calcula los d√≠as y el mes de la quedada. Comprueba si te pasas del d√≠a m√°ximo de del mes y salta al siguiente, reiniciando al d√≠a 1.

        if (nextFecha && !fechas.find(x => x.diaSemana === diaSemana[q])) {
            fechas.push({ diaSemana: diaSemana[q], numeroDia: nextFecha.dia, mes: mes[nextFecha.mes] });
        }

        fechas.sort((a, b) => {
            return diaSemana.indexOf(a.diaSemana) - diaSemana.indexOf(b.diaSemana);
        })
    }

    // Devolvemos las fechas futuras
    let textoFechas = '';
    for (let f of fechas) {
        textoFechas += `${f.diaSemana}, ${f.numeroDia} de ${f.mes}\n`;
    }
    return textoFechas;
}

function calcularNumeroDia(weekDay: number) {
    const hoy = new Date();
    let numToday = hoy.getDay() - 1;

    if (numToday < 0)  // Al cambiar el orden del array de d√≠as, por pura legibilidad, hacemos que el domingo sea el d√≠a 6
        numToday = 6;

    if (weekDay >= numToday) {
        let newDay = hoy.getDate() + (weekDay - numToday);    // Los d√≠as que faltan para la fecha ser√°n la diferencia entre ese d√≠a y el d√≠a que se crea la lista

        let thisMonth = hoy.getMonth();        // Guardamos el mes
        let maxDay = -1;                        // maxDay establecer√° el valor m√°s alto en funci√≥n del mes 28, 29, 30 o 31

        if (thisMonth === 1) {                  // 28 y 29 en febrero
            const anyo = hoy.getFullYear();
            if (anyo % 4 === 0) {
                anyo % 100 === 0 ? (anyo % 400 === 0 ? maxDay = 29 : maxDay = 28) : maxDay = 29;
            } else {
                maxDay = 28;
            }
        }
        else if (thisMonth === 3 || thisMonth === 5 || thisMonth === 8 || thisMonth === 10)   // 30 para abril, junio, septiembre y noviembre
            maxDay = 30;
        else                            // 31 para enero, marzo, mayo, julio, agosto, octubre y diciembre
            maxDay = 31;

        if (newDay > maxDay) {         // Si el d√≠a es mayor al l√≠mite, aumentamos en 1 el mes (o reiniciamos el a√±o si es diciembre) y el nuevo d√≠a ser√° la diferencia
            thisMonth++;
            if (thisMonth > 11) {
                thisMonth = 0;
            }
            newDay = newDay - maxDay;
        }

        return { dia: newDay, mes: thisMonth };
    }

    return null;
}
bot.onText(/\/quitame( +.*)*$/, (msg) => {  // Funci√≥n hom√≥loga a /apuntame. En este caso se puede asumir que es la funci√≥n contraria y, en general, las condiciones estar√°n invertidas
    const chatId = msg.chat.id;

    if (quedadaExists) {
        const user = msg.from;
        if (user) {
            let dias = msg.text?.replace('/quitame', '');

            if (dias && dias.length > 0) {
                let quitadoChanged = false;
                const arrayDias = dias.trim().split(' ');
                const actualDias = procesarDias(arrayDias, true);

                const userData = userApuntado(user);


                if (actualDias.length > 0) {
                    if (userData.exists) {
                        for (const d of actualDias) {
                            let found = false;
                            let dayIndex = -1;

                            for (const [index, e] of userData.dias.entries()) {
                                found = d === e.dia;
                                if (found) {
                                    dayIndex = index;
                                }
                            }

                            if (dayIndex >= 0) {
                                listaQuedada[userData.index].dias.splice(dayIndex, 1);
                                quitadoChanged = true;
                                if (listaQuedada[userData.index].dias.length <= 0) {
                                    listaQuedada.splice(userData.index, 1);
                                }
                            } else {
                                bot.sendMessage(chatId, `Pero si no est√°s apuntado el ${d.toLowerCase()} @${user.username || user.first_name}...`);
                            }
                        }
                        if (quitadoChanged) {
                            bot.editMessageText(generarListaQuedada(), { chat_id: chatId, message_id: idQuedada }).then(res => {
                                bot.sendMessage(chatId, `¬°Ya no est√°s en la quedada, @${user.username || user.first_name}! Esperamos verte en la pr√≥xima.`);
                            });
                        }
                    } else {
                        bot.sendMessage(chatId, `No est√°s apuntado a ning√∫n d√≠a, @${user.username || user.first_name}...`);
                    }
                }
            } else {
                bot.sendMessage(chatId, `¬øY de qu√© d√≠as te quieres quitar, @${user.username || user.first_name}? \n Recuerda: "/quitame [d√≠a/s]"`);
            }
        }
    } else {
        bot.sendMessage(chatId, '¬°Echa el freno, madaleno! ¬°No se ha anunciado ninguna quedada!');
    }
});

bot.onText(/\/aiuda/, (msg) => {  // La misma funci√≥n que ten√≠as, ligeramente formateada y con la informaci√≥n nueva
    const chatId = msg.chat.id;
    bot.sendMessage(chatId,
        `¬øNecesitas saber qu√© comandos puedes usar? ¬°Hagamos memoria!

/proximaQuedada [d√≠as]
Esto generar√° la lista de asistentes para la semana (s√≥lo admins) (Ejemplo: "/proximaQuedada viernes" o "/proximaQuedada viernes sabado").

/apuntame [d√≠as]
Ap√∫ntate a los d√≠as que puedas (separados por espacios) (Ejemplo: "/apuntame viernes", "/apuntame viernes sabado").

/quitame [d√≠as]
Qu√≠tate de los d√≠as que no vayas a asistir (separados por espacios) (Ejemplo: "/quitame viernes", "/quitame viernes sabado").

/apuntarSeta [d√≠as]
Apunta tu setup a los d√≠as que puedas llevarla (separados por espacios) (Ejemplo: "/apuntarSeta viernes", "/apuntarSeta viernes sabado").

/quitarSeta [d√≠as]
Quita tu setup de los d√≠as que no puedas llevarla (separados por espacios) (Ejemplo: "/quitarSeta viernes", "/quitarSeta viernes sabado").

/cambiarNick 'nuevo-nick'
Cambia el nick con el que aparecer√°s en todas las listas (Ejemplo: "/cambiarNick copixuelas" ).

/ruleset
Imprime una imagen del reglamento oficial en el que jugamos con su stagelist actual en Smash M√°laga. /fullruleset para el procedimiento completo.`
    );
})

// Escucha el evento de nuevos miembros en el grupo
bot.on('new_chat_members', (msg) => {
    const chatId = msg.chat.id;
    const newMembers = msg.new_chat_members;

    // Iterar sobre los nuevos miembros
    newMembers?.forEach((member) => {
        const memberName = member.username || member.first_name;
        const newChallengerImgPath = "assets/images/newChallenger.gif"
        if (member.username != "smashmalaga_bot") { // Condicional para que no se d√© la bienvenida as√≠ mismo. Eso es demasiado narcisista y est√° feo
            bot.sendAnimation(chatId, newChallengerImgPath);

            const holaIllo =
                `¬°Nuev@ contrincante! ¬°Te doy la bienvenida al grupo de Smash M√°laga, @${memberName}! Espero que disfrutes de tu estancia. Recuerda que hacemos quedadas todos los fines de semana. 
                \n ¬°Escribe /aiuda para saber qu√© puedes hacer!`;

            // Enviar el mensaje de bienvenida al nuevo miembro
            bot.sendMessage(chatId, holaIllo);
        } else {
            bot.sendMessage(chatId, "¬°Estamos activos papi! ¬°Hola a todo el mundo! üëã")
        }
    });
});

// Gracias a cron, este m√©todo limpiar√° y generar√° una nueva lista vac√≠a para la quedada de la siguiente semana.
// Se genera al minuto 0, a la hora 0, cualquier d√≠a del mes (*), cualquier mes (*), el lunes (1)).

// Es decir, cada lunes a las doce de la noche ya tienes una nueva lista completamente vac√≠a.
cron.schedule('0 0 * * 1', () => {
    quedadaExists = false;
    listaQuedada.length = 0;
    bot.sendMessage('-1001204113061', 'Nueva semana, ¬°nueva lista!');
})

// Aqu√≠ igual, pero hacemos un recordatorio a los usuarios o a los admins de si hay quedada o no, los mi√©rcoles a las 16:00.
// El primer par√°metro en los m√©todos sendMessage es el ID del Chat de Smash M√°laga.
cron.schedule('0 16 * * 3', () => {
    if (quedadaExists) {
        bot.sendMessage('-1001204113061', 'üéÆ Recuerda que ya hay lista para quedar esta semana. √âchale un vistazo a los mensajes fijados para ver los detalles.');
    } else {
        bot.sendMessage('-1001204113061', '‚ö† Recordatorio para los admins: a√∫n no se ha habilitado lista para quedada esta semana. Recordad que con "/proximaQuedada L M X J V S D" pod√©is hacerlo');
    }
})

// Esto enviar√° el ruleset europeo con la imagen del stagelist de Tech Republic IV. Bastante simple.
bot.onText(/\/ruleset/, (msg) => {
    const rulesetPath = 'assets/images/ruleset.jpg'; // Ruta de la imagen 
    const chatId = msg.chat.id;

    bot.sendPhoto(chatId, rulesetPath, { caption: 'Aqu√≠ tienes el ruleset oficial. Se juega a 3 stocks 7 minutos y los bans son 3-4-1.\n\nEscribe /fullruleset para explicarte el procedimiento completo.' });
})

bot.onText(/\/fullruleset/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId,
        `1Ô∏è‚É£ El orden de baneo se decide a piedra-papel-tijera. Quien gane, ser√° el primero en banear 3 escenarios.

2Ô∏è‚É£ Luego, el perdedor banear√° otros 4 escenarios.

3Ô∏è‚É£ Ahora, el ganador eligir√° en qu√© escenario jugar de los dos restantes.

4Ô∏è‚É£ El ganador de la partida banear√° 3 escenarios donde NO jugar.

5Ô∏è‚É£ El perdedor de la ronda elegir√° en qu√© escenario S√ç jugar de los seis que quedan.

6Ô∏è‚É£ Repite los pasos 4 y 5 hasta terminar el set.
`)
    bot.sendMessage(chatId, "NOTA: Antes de empezar con el ban de escenarios, decid qu√© personaje jugar√©is al un√≠sono.")
})

bot.onText(/\/mamataoacuanto/, (msg) => {
    const chatId = msg.chat.id;
    const fechaHoy = new Date();
    bot.sendMessage(chatId, `Son las ${fechaHoy} es hora de jugar bajo presi√≥n`);
})

// VIVA M√ÅLAGA Es broma.
// Asancu (C√≥digo base)

// Colaboradores (esta es la parte en la que metes tu nombre si quieres, aunque solo hayas cambiado un pedacico de c√≥digo, toda ayuda es bien agradecida):
// Karka https://github.com/jmmdev / https://jmmdev.github.io)  =) (Rework del c√≥digo)

// Actualizado el 19 de junio